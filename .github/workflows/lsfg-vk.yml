name: Update lsfg-vk

on:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"

jobs:
  update-lsfg-vk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get latest commit SHA and tag from GitHub API
        id: get-latest-commit
        continue-on-error: true
        run: |
          max_retries=5
          attempt=0
          success=false

          while [ $attempt -lt $max_retries ]; do
            echo "Attempt $((attempt+1)) to fetch latest commit and tag..."
            latest_commit=$(curl -s --fail https://api.github.com/repos/PancakeTAS/lsfg-vk/commits | jq -r '.[0].sha')
            latest_tag=$(curl -s --fail https://api.github.com/repos/PancakeTAS/lsfg-vk/tags | jq -r '.[0].name')
            # Remove leading non-digit characters (e.g., 'v' or 'release-')
            clean_tag=$(echo "$latest_tag" | sed 's/^[^0-9]*//')
            if [ -n "$latest_commit" ] && [ -n "$clean_tag" ] && [ "$latest_commit" != "null" ] && [ "$clean_tag" != "null" ]; then
              success=true
              break
            fi
            attempt=$((attempt+1))
            sleep 5
          done

          if [ "$success" = true ]; then
            short_commit=$(echo "$latest_commit" | cut -c1-7)
            echo "latest_commit=$latest_commit" >> $GITHUB_OUTPUT
            echo "short_commit=$short_commit" >> $GITHUB_OUTPUT
            echo "latest_tag=$clean_tag" >> $GITHUB_OUTPUT
          else
            echo "Failed to fetch commit/tag after $max_retries attempts."
            echo "latest_commit=" >> $GITHUB_OUTPUT
            echo "short_commit=" >> $GITHUB_OUTPUT
            echo "latest_tag=" >> $GITHUB_OUTPUT
          fi

      - name: Get current date
        id: get-current-date
        run: |
          echo "current_date=$(date -u +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Get current commit in spec
        id: get-current-commit
        run: |
          current_commit=$(grep -oP '(?<=^%global longcommit ).*' lsfg-vk.spec || echo "")
          current_commit=$(echo "$current_commit" | tr -d '[:space:]')
          echo "current_commit=$current_commit" >> $GITHUB_OUTPUT

      - name: Compare commits
        id: compare-commits
        run: |
          latest="${{ steps.get-latest-commit.outputs.latest_commit }}"
          current="${{ steps.get-current-commit.outputs.current_commit }}"

          if [ -z "$latest" ]; then
            echo "No latest commit fetched. Skipping update."
            echo "new-commit=false" >> $GITHUB_OUTPUT
          elif [ "$latest" != "$current" ]; then
            echo "New commit found: $latest"
            echo "new-commit=true" >> $GITHUB_OUTPUT
          else
            echo "No update required."
            echo "new-commit=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Spec File
        if: ${{ steps.compare-commits.outputs.new-commit == 'true' }}
        run: |
          sed -i "s/^%global date .*/%global date ${{ steps.get-current-date.outputs.current_date }}/" lsfg-vk.spec
          sed -i "s/^%global commit .*/%global commit ${{ steps.get-latest-commit.outputs.short_commit }}/" lsfg-vk.spec
          sed -i "s/^%global longcommit .*/%global longcommit ${{ steps.get-latest-commit.outputs.latest_commit }}/" lsfg-vk.spec
          sed -i "s/^%global tag .*/%global tag ${{ steps.get-latest-commit.outputs.latest_tag }}/" lsfg-vk.spec
          
      - name: Commit and Push Changes
        if: ${{ steps.compare-commits.outputs.new-commit == 'true' }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add lsfg-vk.spec
          git commit -m "lsfg-vk.spec: Update commit, longcommit, tag and date macros"
          git push
